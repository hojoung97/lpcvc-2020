INFO:root:
Started
INFO:root:Image #0

INFO:root:Feature Extraction Layer

INFO:root:
Input x dimensions before crelu: [1, channels, height, width] = torch.Size([1, 3, 512, 512])

INFO:root:
x1 dimensions after crelu base: [1, channels, height, width] = torch.Size([1, 32, 128, 128])

INFO:root:
f4 dimensions after crelu residual1: [1, channels, height, width] = torch.Size([1, 64, 128, 128])

INFO:root:
f3 dimensions after crelu residual2: [1, channels, height, width] = torch.Size([1, 128, 64, 64])

INFO:root:
f2 dimensions after inception residual1: [1, channels, height, width] = torch.Size([1, 256, 32, 32])

INFO:root:
f1 dimensions after inception residual2: [1, channels, height, width] = torch.Size([1, 384, 16, 16])

INFO:root:Feature Merging Layer

INFO:root:
Input h1 dimensions before first merge: [1, channels, height, width] = torch.Size([1, 384, 16, 16])

INFO:root:
h2 dimensions after first merge: [1, channels, height, width] = torch.Size([1, 128, 32, 32])

INFO:root:
h3 dimensions after second merge: [1, channels, height, width] = torch.Size([1, 64, 64, 64])

INFO:root:
h4 dimensions after third merge: [1, channels, height, width] = torch.Size([1, 32, 128, 128])

INFO:root:
h5 dimensions after final convolution: [1, channels, height, width] = torch.Size([1, 32, 128, 128])

INFO:root:Output Layer

INFO:root:
Input h5 dimensions: [1, channels, height, width] = torch.Size([1, 32, 128, 128])

INFO:root:
Score map dimensions: [1, channels, height, width] = torch.Size([1, 1, 128, 128])

INFO:root:Score map: tensor([[[[0.5474, 0.6013, 0.6553,  ..., 0.4915, 0.5089, 0.5030],
          [0.5619, 0.6199, 0.6243,  ..., 0.4806, 0.5247, 0.5301],
          [0.5238, 0.5609, 0.5656,  ..., 0.4895, 0.4828, 0.4967],
          ...,
          [0.5437, 0.5989, 0.5857,  ..., 0.5056, 0.5133, 0.5193],
          [0.5568, 0.6157, 0.5878,  ..., 0.5471, 0.5839, 0.5235],
          [0.5465, 0.5759, 0.5614,  ..., 0.5961, 0.5545, 0.5005]]]],
       grad_fn=<SigmoidBackward>)
INFO:root:
Geometry map dimensions: [1, channels, height, width] = torch.Size([1, 8, 128, 128])

INFO:root:Geometry map: tensor([[[[253.5028, 251.9096, 258.8153,  ..., 218.7963, 220.8191, 227.2201],
          [243.9440, 232.5214, 259.9042,  ..., 210.0731, 216.3765, 216.8199],
          [271.8416, 229.2124, 244.3678,  ..., 207.1187, 201.6573, 211.1776],
          ...,
          [238.8516, 223.0194, 222.7767,  ..., 286.6801, 284.6090, 182.8761],
          [235.4462, 237.7622, 242.9531,  ..., 225.5116, 255.0940, 236.3024],
          [224.1737, 224.7286, 215.0584,  ..., 249.3487, 267.0469, 302.8597]],

         [[267.6964, 279.9343, 272.6548,  ..., 255.4630, 252.5867, 239.5887],
          [302.7092, 294.4857, 272.5645,  ..., 240.7738, 237.7609, 234.8888],
          [297.0732, 279.8315, 299.5253,  ..., 243.7720, 247.7730, 250.9587],
          ...,
          [260.5255, 255.6912, 276.3209,  ..., 290.4363, 255.8470, 275.6300],
          [254.5762, 235.2552, 259.6561,  ..., 230.4685, 221.7033, 287.0609],
          [256.0192, 250.0642, 269.4049,  ..., 251.6897, 311.3485, 302.2513]],

         [[226.7176, 271.9119, 239.1083,  ..., 214.2388, 218.9988, 209.9819],
          [236.3201, 238.5542, 220.5409,  ..., 216.6861, 227.8676, 212.9226],
          [270.0186, 240.0031, 255.6607,  ..., 230.6152, 260.4057, 228.5144],
          ...,
          [236.9256, 224.1205, 230.7029,  ..., 270.9654, 243.1758, 243.9549],
          [232.4977, 208.2809, 215.2289,  ..., 260.3689, 250.8087, 201.6949],
          [226.9044, 208.1746, 231.5926,  ..., 215.1329, 241.4361, 229.0567]],

         ...,

         [[292.3486, 260.4360, 245.3534,  ..., 280.2937, 270.8950, 283.5746],
          [265.6575, 270.0691, 245.4617,  ..., 284.6323, 263.0274, 288.2980],
          [228.0080, 272.0694, 237.2442,  ..., 265.3434, 258.1106, 276.1382],
          ...,
          [277.4155, 265.5099, 270.7651,  ..., 212.6539, 247.2673, 287.9941],
          [275.6592, 236.3176, 264.4232,  ..., 243.2574, 207.1426, 267.7870],
          [277.2362, 275.0446, 281.3373,  ..., 214.9483, 272.8763, 240.5893]],

         [[226.6131, 231.3342, 229.0882,  ..., 245.4917, 251.9558, 267.5136],
          [216.4570, 218.4175, 262.1099,  ..., 246.9745, 257.1519, 282.8530],
          [230.9161, 230.6911, 256.5959,  ..., 237.8521, 232.4831, 276.7685],
          ...,
          [236.8542, 240.2982, 242.1913,  ..., 251.3554, 247.8037, 201.3669],
          [228.6592, 246.5420, 258.8535,  ..., 239.6331, 223.8377, 228.0489],
          [241.2512, 259.3807, 248.4235,  ..., 245.8880, 269.4152, 264.4046]],

         [[306.4557, 279.9038, 274.4570,  ..., 309.4420, 310.8021, 311.1995],
          [290.4417, 314.7693, 302.9578,  ..., 312.3863, 310.8869, 298.0608],
          [261.1028, 296.2502, 269.6725,  ..., 311.1426, 305.6867, 310.0831],
          ...,
          [273.2900, 274.7755, 288.1611,  ..., 263.3934, 315.0474, 329.7578],
          [279.5760, 266.7538, 303.9520,  ..., 271.4086, 291.8521, 349.6142],
          [314.3541, 298.8609, 276.4829,  ..., 255.4469, 282.6302, 325.2591]]]],
       grad_fn=<MulBackward0>)
INFO:root:-------------------------------------------------
INFO:root:Image #1

INFO:root:Feature Extraction Layer

INFO:root:
Input x dimensions before crelu: [1, channels, height, width] = torch.Size([1, 3, 512, 512])

INFO:root:
x1 dimensions after crelu base: [1, channels, height, width] = torch.Size([1, 32, 128, 128])

INFO:root:
f4 dimensions after crelu residual1: [1, channels, height, width] = torch.Size([1, 64, 128, 128])

INFO:root:
f3 dimensions after crelu residual2: [1, channels, height, width] = torch.Size([1, 128, 64, 64])

INFO:root:
f2 dimensions after inception residual1: [1, channels, height, width] = torch.Size([1, 256, 32, 32])

INFO:root:
f1 dimensions after inception residual2: [1, channels, height, width] = torch.Size([1, 384, 16, 16])

INFO:root:Feature Merging Layer

INFO:root:
Input h1 dimensions before first merge: [1, channels, height, width] = torch.Size([1, 384, 16, 16])

INFO:root:
h2 dimensions after first merge: [1, channels, height, width] = torch.Size([1, 128, 32, 32])

INFO:root:
h3 dimensions after second merge: [1, channels, height, width] = torch.Size([1, 64, 64, 64])

INFO:root:
h4 dimensions after third merge: [1, channels, height, width] = torch.Size([1, 32, 128, 128])

INFO:root:
h5 dimensions after final convolution: [1, channels, height, width] = torch.Size([1, 32, 128, 128])

INFO:root:Output Layer

INFO:root:
Input h5 dimensions: [1, channels, height, width] = torch.Size([1, 32, 128, 128])

INFO:root:
Score map dimensions: [1, channels, height, width] = torch.Size([1, 1, 128, 128])

INFO:root:Score map: tensor([[[[0.5294, 0.5741, 0.6262,  ..., 0.5146, 0.5004, 0.4940],
          [0.5541, 0.5548, 0.5809,  ..., 0.5764, 0.5715, 0.5578],
          [0.5621, 0.6154, 0.6811,  ..., 0.6628, 0.6044, 0.5747],
          ...,
          [0.6052, 0.5905, 0.5746,  ..., 0.5492, 0.5575, 0.5316],
          [0.6036, 0.6295, 0.6708,  ..., 0.5413, 0.5850, 0.5533],
          [0.5645, 0.5680, 0.5076,  ..., 0.5319, 0.5255, 0.5564]]]],
       grad_fn=<SigmoidBackward>)
INFO:root:
Geometry map dimensions: [1, channels, height, width] = torch.Size([1, 8, 128, 128])

INFO:root:Geometry map: tensor([[[[218.2729, 230.5715, 195.8925,  ..., 239.3217, 241.6692, 234.2239],
          [221.2547, 256.9623, 237.8497,  ..., 214.8242, 230.9788, 207.4995],
          [226.8761, 210.2559, 207.2863,  ..., 241.9368, 224.3402, 199.9123],
          ...,
          [241.2107, 278.2226, 269.5023,  ..., 223.9826, 226.7885, 222.8947],
          [244.4355, 248.9815, 257.0493,  ..., 263.2070, 226.8863, 227.3910],
          [248.9849, 266.5758, 274.1585,  ..., 260.5270, 255.2501, 242.3811]],

         [[254.7027, 230.1147, 264.2440,  ..., 269.0138, 281.0555, 272.8829],
          [267.5622, 252.0970, 295.3523,  ..., 267.3073, 285.7186, 267.3642],
          [250.9117, 273.4797, 288.0376,  ..., 266.2662, 296.4523, 236.8077],
          ...,
          [258.7093, 290.7978, 290.1588,  ..., 253.1012, 266.6149, 271.9925],
          [267.9157, 263.8391, 265.9022,  ..., 268.5892, 261.7444, 270.8700],
          [273.1040, 309.4929, 313.6380,  ..., 296.0566, 283.8523, 289.6874]],

         [[278.8296, 289.7642, 287.7875,  ..., 242.0213, 240.2235, 252.6788],
          [243.8751, 259.6478, 285.7431,  ..., 241.6632, 242.3613, 232.2194],
          [221.6438, 248.8282, 257.2744,  ..., 259.5271, 241.3427, 229.2869],
          ...,
          [272.5077, 237.1887, 252.8422,  ..., 255.9124, 265.2039, 249.5949],
          [241.3595, 234.4247, 267.1294,  ..., 226.5657, 223.8230, 241.3285],
          [246.2350, 241.0487, 246.8701,  ..., 228.4058, 227.3665, 232.4742]],

         ...,

         [[296.4074, 339.6628, 336.1234,  ..., 261.9980, 253.3123, 259.7780],
          [285.4676, 346.8928, 303.6968,  ..., 235.3097, 235.2786, 235.8520],
          [290.8856, 336.4415, 306.1511,  ..., 295.6777, 251.1954, 224.3559],
          ...,
          [319.4874, 306.1537, 302.1165,  ..., 333.5550, 312.1131, 301.3822],
          [314.2462, 306.3549, 314.5173,  ..., 302.6567, 281.7095, 290.1968],
          [306.6305, 317.2414, 302.6496,  ..., 303.6776, 289.3818, 281.5092]],

         [[255.2174, 231.3802, 212.4601,  ..., 269.6585, 246.3006, 250.6011],
          [224.6202, 197.7836, 228.3114,  ..., 227.8180, 228.0667, 236.8877],
          [201.9268, 176.9070, 214.3004,  ..., 283.4547, 250.3124, 220.8574],
          ...,
          [206.1915, 183.9766, 220.1191,  ..., 236.8198, 230.1582, 259.7985],
          [208.3610, 196.6275, 241.8011,  ..., 226.8686, 208.3983, 256.3058],
          [202.7608, 202.9326, 226.9811,  ..., 211.4848, 212.4980, 229.0433]],

         [[232.0701, 202.5935, 233.2137,  ..., 272.6672, 263.3432, 249.8555],
          [243.2740, 190.8638, 244.7336,  ..., 262.5071, 245.7549, 266.1944],
          [251.8293, 211.4419, 274.9365,  ..., 290.8778, 264.6888, 278.4780],
          ...,
          [199.6954, 183.9149, 185.1735,  ..., 197.3232, 214.2489, 248.5087],
          [219.5541, 208.3711, 205.5247,  ..., 234.1254, 250.7806, 253.6138],
          [234.7938, 237.1453, 217.9677,  ..., 242.6644, 235.4304, 264.2019]]]],
       grad_fn=<MulBackward0>)
INFO:root:-------------------------------------------------
INFO:root:Finished

